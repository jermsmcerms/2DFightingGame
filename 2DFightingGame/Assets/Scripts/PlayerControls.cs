//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TDFG {
    public partial class @PlayerControls : IInputActionCollection2, IDisposable {
        public InputActionAsset asset { get; }
        public @PlayerControls() {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""MatchControls"",
            ""id"": ""a9d5f471-1bfd-4c1b-a2e7-f65f2e4a4f66"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0a8b595f-b273-47df-8799-a609a8843d7e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7392f426-9a00-494c-ac5d-7cb30348b4ce"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2d0370da-d9a6-4407-9e20-c68c9e5622cc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""be3cc7ff-b664-49e4-a68b-09e4ecd14f6c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f1e95688-8bb8-48ce-adc5-dbd42e8fb429"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""905b423c-ff0b-4592-a24a-e713546c3cda"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // MatchControls
            m_MatchControls = asset.FindActionMap("MatchControls", throwIfNotFound: true);
            m_MatchControls_Movement = m_MatchControls.FindAction("Movement", throwIfNotFound: true);
        }

        public void Dispose() {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action) {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator() {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator() {
            return GetEnumerator();
        }

        public void Enable() {
            asset.Enable();
        }

        public void Disable() {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false) {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action) {
            return asset.FindBinding(bindingMask, out action);
        }

        // MatchControls
        private readonly InputActionMap m_MatchControls;
        private IMatchControlsActions m_MatchControlsActionsCallbackInterface;
        private readonly InputAction m_MatchControls_Movement;
        public struct MatchControlsActions {
            private @PlayerControls m_Wrapper;
            public MatchControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_MatchControls_Movement;
            public InputActionMap Get() { return m_Wrapper.m_MatchControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MatchControlsActions set) { return set.Get(); }
            public void SetCallbacks(IMatchControlsActions instance) {
                if (m_Wrapper.m_MatchControlsActionsCallbackInterface != null) {
                    @Movement.started -= m_Wrapper.m_MatchControlsActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_MatchControlsActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_MatchControlsActionsCallbackInterface.OnMovement;
                }
                m_Wrapper.m_MatchControlsActionsCallbackInterface = instance;
                if (instance != null) {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                }
            }
        }
        public MatchControlsActions @MatchControls => new MatchControlsActions(this);
        public interface IMatchControlsActions {
            void OnMovement(InputAction.CallbackContext context);
        }
    }
}
